---
import { Image } from "astro:assets";
import slide1 from "../assets/images/1.png";
import slide2 from "../assets/images/2.png";

// Выносим данные слайдов в массив для чистоты кода
const slides = [
    { src: slide1, alt: "Первый слайд", slideClass: "number-slide1" },
    { src: slide2, alt: "Второй слайд", slideClass: "number-slide2" },
    { src: slide1, alt: "Третий слайд", slideClass: "number-slide3" },
];
---
<div id="hero-slider" class="keen-slider">
    {
        slides.map((slide) => (
            <div class={`keen-slider__slide ${slide.slideClass}`}>
                <Image
                    src={slide.src}
                    alt={slide.alt}
                    // widths={[350, 600, 800]}
                    // sizes={"(max-width: 600px) 350px, (max-width: 900px) 600px, 800px"}
                    widths={[240, 300, 500]}
                    sizes={`(max-width: 360px) 240px, (max-width: 720px) 300px, 500px`}
                    loading="eager"
                    fetchpriority="high"
                    format="webp"
                    quality={80}
                    decoding="async"
                />
            </div>
        ))
    }
</div>

<script>
    const slider = document.getElementById("hero-slider") as HTMLElement;
    // @ts-ignore
    import KeenSlider from "keen-slider";
    // @ts-ignore
    import type { KeenSliderInstance, KeenSliderPlugin } from "keen-slider";

    // Описываем плагин навигации
    const navigation: KeenSliderPlugin = (slider: KeenSliderInstance) => {
        // Используем `let` и явно указываем типы
        let wrapper: HTMLDivElement | null = null;
        let dots: HTMLDivElement | null = null;
        let arrowLeft: HTMLDivElement | null = null;
        let arrowRight: HTMLDivElement | null = null;

        function markup(remove: boolean): void {
            wrapperMarkup(remove);
            dotMarkup(remove);
            arrowMarkup(remove);
        }

        function removeElement(element: HTMLElement | null): void {
            // БЕЗОПАСНОСТЬ: Проверяем, что элемент существует, перед удалением
            element?.parentNode?.removeChild(element);
        }

        // МОДЕРНИЗАЦИЯ: Заменили `var` на `const`
        function createDiv(className: string): HTMLDivElement {
            const div = document.createElement("div");
            const classNames = className.split(" ");
            classNames.forEach((name) => div.classList.add(name));
            return div;
        }

        function arrowMarkup(remove: boolean): void {
            if (remove) {
                removeElement(arrowLeft);
                removeElement(arrowRight);
                return;
            }
            arrowLeft = createDiv("arrow arrow--left");
            arrowLeft.addEventListener("click", () => slider.prev());
            arrowRight = createDiv("arrow arrow--right");
            arrowRight.addEventListener("click", () => slider.next());

            wrapper?.appendChild(arrowLeft);
            wrapper?.appendChild(arrowRight);
        }

        function wrapperMarkup(remove: boolean): void {
            if (remove) {
                if (wrapper?.parentNode) {
                    while (wrapper.firstChild) {
                        wrapper.parentNode.insertBefore(
                            wrapper.firstChild,
                            wrapper,
                        );
                    }
                }
                removeElement(wrapper);
                return;
            }
            wrapper = createDiv("navigation-wrapper");
            slider.container.parentNode?.appendChild(wrapper);
            wrapper.appendChild(slider.container);
        }

        function dotMarkup(remove: boolean): void {
            if (remove) {
                removeElement(dots);
                return;
            }
            dots = createDiv("dots");
            slider.track.details.slides.forEach((_, idx: number) => {
                const dot = createDiv("dot");
                dot.addEventListener("click", () => slider.moveToIdx(idx));
                dots?.appendChild(dot);
            });
            wrapper?.appendChild(dots);
        }

        function updateClasses(): void {
            if (!arrowLeft || !arrowRight || !dots) return; // БЕЗОПАСНОСТЬ: Проверка на существование элементов

            const slide = slider.track.details.rel;

            // Управление классом disabled для стрелок
            arrowLeft.classList.toggle("arrow--disabled", slide === 0);
            arrowRight.classList.toggle(
                "arrow--disabled",
                slide === slider.track.details.slides.length - 1,
            );

            // Обновление активной точки
            Array.from(dots.children).forEach((dot, idx) => {
                dot.classList.toggle("dot--active", idx === slide);
            });
        }

        slider.on("created", () => {
            markup(false);
            updateClasses();
        });
        slider.on("optionsChanged", () => {
            console.log("options changed");
            markup(false); // Должно быть `false` для пересоздания, или логика должна быть другой
            updateClasses();
        });
        slider.on("slideChanged", updateClasses);
        slider.on("destroyed", () => {
            markup(true);
        });
    };

    // Инициализация слайдера
    const keenSliderInstance = new KeenSlider("#hero-slider", { loop: true }, [
        navigation,
    ]);
    slider.style.flexWrap = "nowrap";
</script>

<style >
#hero-slider {
    /* opacity: 0; */
    display:flex;
    flex-wrap: wrap;
    aspect-ratio: 300 / 200;
    overflow: hidden;
    .number-slide1 {
        width: 100%;

    }
}
</style>
