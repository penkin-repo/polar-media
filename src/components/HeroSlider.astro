---
import { Image } from "astro:assets";
import slide1 from "../assets/images/1.png";
import slide2 from "../assets/images/2.png";

// УЛУЧШЕНИЕ: Выносим данные слайдов в массив для чистоты кода
const slides = [
    { src: slide1, alt: "Первый слайд", slideClass: "number-slide1" },
    { src: slide2, alt: "Второй слайд", slideClass: "number-slide2" },
    { src: slide1, alt: "Третий слайд", slideClass: "number-slide3" },
];
---

<div id="hero-slider" class="keen-slider">
    {
        slides.map((slide) => (
            <div class={`keen-slider__slide ${slide.slideClass}`}>
                <Image
                    src={slide.src}
                    alt={slide.alt}
                    widths={[400, 600, 800]}
                    sizes="(max-width: 600px) 350px, (max-width: 900px) 600px, 800px"
                    loading="eager"
                    format="webp"
                    quality={80}
                    decoding="async"
                />
            </div>
        ))
    }
</div>

<script>
    // @ts-ignore
    import KeenSlider from "keen-slider";
    // @ts-ignore
    import type { KeenSliderInstance, KeenSliderPlugin } from "keen-slider";

    // ТИПЫ: Описываем плагин навигации
    const navigation: KeenSliderPlugin = (slider: KeenSliderInstance) => {
        // МОДЕРНИЗАЦИЯ: Используем `let` и явно указываем типы
        let wrapper: HTMLDivElement | null = null;
        let dots: HTMLDivElement | null = null;
        let arrowLeft: HTMLDivElement | null = null;
        let arrowRight: HTMLDivElement | null = null;

        function markup(remove: boolean): void {
            wrapperMarkup(remove);
            dotMarkup(remove);
            arrowMarkup(remove);
        }

        function removeElement(element: HTMLElement | null): void {
            // БЕЗОПАСНОСТЬ: Проверяем, что элемент существует, перед удалением
            element?.parentNode?.removeChild(element);
        }

        // МОДЕРНИЗАЦИЯ: Заменили `var` на `const`
        function createDiv(className: string): HTMLDivElement {
            const div = document.createElement("div");
            const classNames = className.split(" ");
            classNames.forEach((name) => div.classList.add(name));
            return div;
        }

        function arrowMarkup(remove: boolean): void {
            if (remove) {
                removeElement(arrowLeft);
                removeElement(arrowRight);
                return;
            }
            arrowLeft = createDiv("arrow arrow--left");
            arrowLeft.addEventListener("click", () => slider.prev());
            arrowRight = createDiv("arrow arrow--right");
            arrowRight.addEventListener("click", () => slider.next());

            wrapper?.appendChild(arrowLeft);
            wrapper?.appendChild(arrowRight);
        }

        function wrapperMarkup(remove: boolean): void {
            if (remove) {
                if (wrapper?.parentNode) {
                    while (wrapper.firstChild) {
                        wrapper.parentNode.insertBefore(
                            wrapper.firstChild,
                            wrapper,
                        );
                    }
                }
                removeElement(wrapper);
                return;
            }
            wrapper = createDiv("navigation-wrapper");
            slider.container.parentNode?.appendChild(wrapper);
            wrapper.appendChild(slider.container);
        }

        function dotMarkup(remove: boolean): void {
            if (remove) {
                removeElement(dots);
                return;
            }
            dots = createDiv("dots");
            slider.track.details.slides.forEach((_, idx: number) => {
                const dot = createDiv("dot");
                dot.addEventListener("click", () => slider.moveToIdx(idx));
                dots?.appendChild(dot);
            });
            wrapper?.appendChild(dots);
        }

        function updateClasses(): void {
            if (!arrowLeft || !arrowRight || !dots) return; // БЕЗОПАСНОСТЬ: Проверка на существование элементов

            const slide = slider.track.details.rel;

            // Управление классом disabled для стрелок
            arrowLeft.classList.toggle("arrow--disabled", slide === 0);
            arrowRight.classList.toggle(
                "arrow--disabled",
                slide === slider.track.details.slides.length - 1,
            );

            // Обновление активной точки
            Array.from(dots.children).forEach((dot, idx) => {
                dot.classList.toggle("dot--active", idx === slide);
            });
        }

        slider.on("created", () => {
            markup(false);
            updateClasses();
        });
        slider.on("optionsChanged", () => {
            console.log("options changed");
            markup(false); // Должно быть `false` для пересоздания, или логика должна быть другой
            updateClasses();
        });
        slider.on("slideChanged", updateClasses);
        slider.on("destroyed", () => {
            markup(true);
        });
    };

    // Инициализация слайдера
    const keenSliderInstance = new KeenSlider("#hero-slider", { loop: true }, [
        navigation,
    ]);
</script>

<style is:global>
    [class^="number-slide"],
    [class*=" number-slide"] {
        cursor: grab;
    }

    [class^="number-slide"]:active,
    [class*=" number-slide"]:active {
        cursor: grabbing;
    }

    .navigation-wrapper {
        position: relative;
    }

    .dots {
        display: flex;
        padding: 20px 0;
        justify-content: center;
    }

    .dot {
        border: none;
        width: 10px;
        height: 10px;
        background: #c5c5c5;
        border-radius: 50%;
        margin: 0 5px;
        padding: 5px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .dot:focus {
        outline: none;
    }

    .dot.dot--active {
        background: #000;
        opacity: 1;
    }

    .arrow {
        width: 24px;
        height: 24px;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        -webkit-transform: translateY(-50%);
        cursor: pointer;
        opacity: 0.7;
        transition: opacity 0.2s;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
    }

    .arrow:hover {
        opacity: 1;
    }

    .arrow--left {
        left: 10px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M16.67 0l2.83 2.829-9.339 9.175 9.339 9.167-2.83 2.829-12.17-11.996z'/%3E%3C/svg%3E");
    }

    .arrow--right {
        right: 10px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M5 3l3.057-3 11.943 12-11.943 12-3.057-3 9-9z'/%3E%3C/svg%3E");
    }

    .arrow--disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }
</style>
