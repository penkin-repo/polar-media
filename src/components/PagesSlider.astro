---
import { Image } from "astro:assets";

type GlobImageImport = {
    default: ImageMetadata;
};
const { imageImports } = Astro.props;

if (!imageImports || imageImports.length === 0) {
    return null;
}
---

<div class="keen-slider">
    {
        imageImports.map((slide: GlobImageImport) => (
            <div class={`keen-slider__slide number-slide`}>
                <Image
                    src={slide.default}
                    alt="Печать на баннере картинка"
                    widths={[400, 600, 800]}
                    sizes="(max-width: 600px) 400px, (max-width: 900px) 600px, 800px"
                    format="webp"
                    quality={80}
                    class=""
                    decoding="async"
                />
            </div>
        ))
    }
</div>

<script>
    // @ts-ignore
    import KeenSlider from "keen-slider";
    // @ts-ignore
    import type { KeenSliderInstance, KeenSliderPlugin } from "keen-slider";

    // ТИПЫ: Описываем плагин навигации
    const navigation: KeenSliderPlugin = (slider: KeenSliderInstance) => {
        // МОДЕРНИЗАЦИЯ: Используем `let` и явно указываем типы
        let wrapper: HTMLDivElement | null = null;
        let dots: HTMLDivElement | null = null;
        let arrowLeft: HTMLDivElement | null = null;
        let arrowRight: HTMLDivElement | null = null;

        function markup(remove: boolean): void {
            wrapperMarkup(remove);
            dotMarkup(remove);
            arrowMarkup(remove);
        }

        function removeElement(element: HTMLElement | null): void {
            // БЕЗОПАСНОСТЬ: Проверяем, что элемент существует, перед удалением
            element?.parentNode?.removeChild(element);
        }

        // МОДЕРНИЗАЦИЯ: Заменили `var` на `const`
        function createDiv(className: string): HTMLDivElement {
            const div = document.createElement("div");
            const classNames = className.split(" ");
            classNames.forEach((name) => div.classList.add(name));
            return div;
        }

        function arrowMarkup(remove: boolean): void {
            if (remove) {
                removeElement(arrowLeft);
                removeElement(arrowRight);
                return;
            }
            arrowLeft = createDiv("arrow arrow--left");
            arrowLeft.addEventListener("click", () => slider.prev());
            arrowRight = createDiv("arrow arrow--right");
            arrowRight.addEventListener("click", () => slider.next());

            wrapper?.appendChild(arrowLeft);
            wrapper?.appendChild(arrowRight);
        }

        function wrapperMarkup(remove: boolean): void {
            if (remove) {
                if (wrapper?.parentNode) {
                    while (wrapper.firstChild) {
                        wrapper.parentNode.insertBefore(
                            wrapper.firstChild,
                            wrapper,
                        );
                    }
                }
                removeElement(wrapper);
                return;
            }
            wrapper = createDiv("navigation-wrapper");
            slider.container.parentNode?.appendChild(wrapper);
            wrapper.appendChild(slider.container);
        }

        function dotMarkup(remove: boolean): void {
            if (remove) {
                removeElement(dots);
                return;
            }
            dots = createDiv("dots");
            slider.track.details.slides.forEach((_, idx: number) => {
                const dot = createDiv("dot");
                dot.addEventListener("click", () => slider.moveToIdx(idx));
                dots?.appendChild(dot);
            });
            wrapper?.appendChild(dots);
        }

        function updateClasses(): void {
            if (!arrowLeft || !arrowRight || !dots) return; // БЕЗОПАСНОСТЬ: Проверка на существование элементов

            const slide = slider.track.details.rel;

            // Управление классом disabled для стрелок
            arrowLeft.classList.toggle("arrow--disabled", slide === 0);
            arrowRight.classList.toggle(
                "arrow--disabled",
                slide === slider.track.details.slides.length - 1,
            );

            // Обновление активной точки
            Array.from(dots.children).forEach((dot, idx) => {
                dot.classList.toggle("dot--active", idx === slide);
            });
        }

        slider.on("created", () => {
            markup(false);
            updateClasses();
        });
        slider.on("optionsChanged", () => {
            console.log("options changed");
            markup(false); // Должно быть `false` для пересоздания, или логика должна быть другой
            updateClasses();
        });
        slider.on("slideChanged", updateClasses);
        slider.on("destroyed", () => {
            markup(true);
        });
    };

    const sliders = document.querySelectorAll(
        ".keen-slider",
    ) as NodeListOf<HTMLElement>;
    // console.log(this.dataset.message);
    sliders.forEach((slider) => {
        const keenSliderInstance = new KeenSlider(slider, { loop: true }, [
            navigation,
        ]);
    });

    // Инициализация слайдера
    // const keenSliderInstance = new KeenSlider(
    //     sliders,
    //     { loop: true },
    //     [navigation],
    // );
</script>

<style>
    .keen-slider {
        border-radius: 20px;
        aspect-ratio: 4 / 3;
        overflow: hidden;

        img {
            object-fit: contain;
            width: 100%;
            height: 100%;
        }
    }
</style>
